function [methodinfo,structs,enuminfo,ThunkLibName]=legacy
%LEGACY Create structures to define interfaces found in 'legacyToolkit'.

%This function was generated by loadlibrary.m parser version  on Wed Jun 29 13:57:37 2022
%perl options:'legacyToolkit.i -outfile=legacy.m -thunkfile=legacymsx_thunk_pcwin64.c -header=legacyToolkit.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'legacymsx_thunk_pcwin64');
% int  __stdcall Legacyopen ( MSXproject * MSX , char * argv []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='Legacyopen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtrPtr', 'stringPtrPtr'};fcnNum=fcnNum+1;
% int  __stdcall MSXsolveH ( MSXproject MSX ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MSXsolveH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr'};fcnNum=fcnNum+1;
% int  __stdcall MSXusehydfile ( MSXproject MSX ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MSXusehydfile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr'};fcnNum=fcnNum+1;
% int  __stdcall MSXsolveQ ( MSXproject MSX ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MSXsolveQ'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr'};fcnNum=fcnNum+1;
% int  __stdcall Legacyinit ( MSXproject MSX , int saveFlag ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='Legacyinit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32'};fcnNum=fcnNum+1;
% int  __stdcall MSXsaveoutfile ( MSXproject MSX , char * fname ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='MSXsaveoutfile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'cstring'};fcnNum=fcnNum+1;
% int  __stdcall MSXsavemsxfile ( MSXproject MSX , char * fname ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='MSXsavemsxfile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'cstring'};fcnNum=fcnNum+1;
% int  __stdcall MSXreport ( MSXproject MSX , char * fname ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='MSXreport'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'cstring'};fcnNum=fcnNum+1;
% int  __stdcall Legacyclose ( MSXproject MSX ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='Legacyclose'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr'};fcnNum=fcnNum+1;
% int  __stdcall MSXsaveResults ( MSXproject MSX ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MSXsaveResults'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr'};fcnNum=fcnNum+1;
% int  __stdcall MSXsaveFinalResults ( MSXproject MSX ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MSXsaveFinalResults'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr'};fcnNum=fcnNum+1;
% void  __stdcall MSXrunLegacy ( int argc , char * argv []); 
fcns.thunkname{fcnNum}='voidint32voidPtrThunk';fcns.name{fcnNum}='MSXrunLegacy'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'stringPtrPtr'};fcnNum=fcnNum+1;
structs.Project.members=struct('');
methodinfo=fcns;