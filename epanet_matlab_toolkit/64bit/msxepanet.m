function [methodinfo,structs,enuminfo,ThunkLibName]=msxepanet
%MSXEPANET Create structures to define interfaces found in 'epanetmsx'.

%This function was generated by loadlibrary.m parser version  on Thu Nov 10 17:53:35 2022
%perl options:'epanetmsx.i -outfile=msxepanet.m -thunkfile=epanetmsx_thunk_pcwin64.c -header=epanetmsx.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'epanetmsx_thunk_pcwin64');
% int  _stdcall  MSXopen ( char * fname ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='MSXopen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  MSXsolveH ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='MSXsolveH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int  _stdcall  MSXusehydfile ( char * fname ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='MSXusehydfile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  MSXsolveQ ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='MSXsolveQ'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int  _stdcall  MSXinit ( int saveFlag ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='MSXinit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  _stdcall  MSXstep ( long * t , long * tleft ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MSXstep'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'longPtr', 'longPtr'};fcnNum=fcnNum+1;
% int  _stdcall  MSXsaveoutfile ( char * fname ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='MSXsaveoutfile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  MSXsavemsxfile ( char * fname ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='MSXsavemsxfile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  MSXreport ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='MSXreport'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int  _stdcall  MSXclose ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='MSXclose'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int  _stdcall  MSXgetindex ( int type , char * id , int * index ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='MSXgetindex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  MSXgetIDlen ( int type , int index , int * len ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='MSXgetIDlen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  MSXgetID ( int type , int index , char * id , int len ); 
fcns.thunkname{fcnNum}='int32int32int32cstringint32Thunk';fcns.name{fcnNum}='MSXgetID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  MSXgetcount ( int type , int * count ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='MSXgetcount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  MSXgetspecies ( int index , int * type , char * units , double * aTol , double * rTol ); 
fcns.thunkname{fcnNum}='int32int32voidPtrcstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MSXgetspecies'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'cstring', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% int  _stdcall  MSXgetconstant ( int index , double * value ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='MSXgetconstant'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int  _stdcall  MSXgetparameter ( int type , int index , int param , double * value ); 
fcns.thunkname{fcnNum}='int32int32int32int32voidPtrThunk';fcns.name{fcnNum}='MSXgetparameter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int  _stdcall  MSXgetsource ( int node , int species , int * type , double * level , int * pat ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MSXgetsource'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr', 'doublePtr', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  MSXgetpatternlen ( int pat , int * len ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='MSXgetpatternlen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  MSXgetpatternvalue ( int pat , int period , double * value ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='MSXgetpatternvalue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int  _stdcall  MSXgetinitqual ( int type , int index , int species , double * value ); 
fcns.thunkname{fcnNum}='int32int32int32int32voidPtrThunk';fcns.name{fcnNum}='MSXgetinitqual'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int  _stdcall  MSXgetqual ( int type , int index , int species , double * value ); 
fcns.thunkname{fcnNum}='int32int32int32int32voidPtrThunk';fcns.name{fcnNum}='MSXgetqual'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int  _stdcall  MSXgeterror ( int code , char * msg , int len ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='MSXgeterror'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  MSXsetconstant ( int index , double value ); 
fcns.thunkname{fcnNum}='int32int32doubleThunk';fcns.name{fcnNum}='MSXsetconstant'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'double'};fcnNum=fcnNum+1;
% int  _stdcall  MSXsetparameter ( int type , int index , int param , double value ); 
fcns.thunkname{fcnNum}='int32int32int32int32doubleThunk';fcns.name{fcnNum}='MSXsetparameter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'double'};fcnNum=fcnNum+1;
% int  _stdcall  MSXsetinitqual ( int type , int index , int species , double value ); 
fcns.thunkname{fcnNum}='int32int32int32int32doubleThunk';fcns.name{fcnNum}='MSXsetinitqual'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'double'};fcnNum=fcnNum+1;
% int  _stdcall  MSXsetsource ( int node , int species , int type , double level , int pat ); 
fcns.thunkname{fcnNum}='int32int32int32int32doubleint32Thunk';fcns.name{fcnNum}='MSXsetsource'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'double', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  MSXsetpatternvalue ( int pat , int period , double value ); 
fcns.thunkname{fcnNum}='int32int32int32doubleThunk';fcns.name{fcnNum}='MSXsetpatternvalue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'double'};fcnNum=fcnNum+1;
% int  _stdcall  MSXsetpattern ( int pat , double mult [], int len ); 
fcns.thunkname{fcnNum}='int32int32voidPtrint32Thunk';fcns.name{fcnNum}='MSXsetpattern'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  MSXaddpattern ( char * id ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='MSXaddpattern'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
methodinfo=fcns;